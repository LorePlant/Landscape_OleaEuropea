
#### loading genotypic file and filtering individuals and MAF
setwd("/storage/replicated/cirad/projects/CLIMOLIVEMED/results/GenomicOffsets/Lorenzo")

geno359.VCF <- read.vcfR("359_Olive_west_MAF005.vcf.recode.vcf")#import vcf file
gl.genoLAND <- vcfR2genind(geno359.VCF)#transfrom file in genind object
geno359<-as.data.frame(gl.genoLAND)
geno359<-geno359%>% select(ends_with(".0"))
for (i in 1:ncol(geno359))
{
  geno359[which(is.na(geno359[,i])),i] <- median(geno359[-which(is.na(geno359[,i])),i], na.rm=TRUE)
}

##### Filter Wild individual 
wild_list<-read.table("Wild_list.txt", header = F)
genoWild <-  geno359[rownames(geno359)%in% wild_list$V1, ]

### Filter wild dataset for MAF 005
freq_mean <- colMeans(genoWild)
genoWild_MAF005 <- genoWild[,-which(freq_mean>=0.95 | freq_mean<=0.05)]

write.table(genoWild_MAF005, "genoWild_MAF005_imputated.txt")
genoWild_MAF005<- read.table("genoWild_MAF005_imputated.txt", header = T)

### Calcolate PC to use as covariate
library(FactoMineR)
library(factoextra)

res.pca<-PCA(genoWild_MAF005, scale.unit = TRUE, ncp = 5, graph = TRUE)
# Create a data frame for PCA results
ind <- get_pca_ind(res.pca)
pca_data <- as.data.frame(ind$coord)
eig.val <- get_eigenvalue(res.pca) #selected 5 PCs


####### prepare RDA datasets

#standardize bioclim variable
data_wild<- read.csv("WILD_135.csv", header = TRUE)
bio = data_wild[ ,11:24]
Env <- scale(bio, center=TRUE, scale=TRUE)
Env <- as.data.frame(Env)

#combining geographic, Popstructure, environmental (scaled) variables
Variables <- data.frame(data_wild$IDSample, data_wild$long, data_wild$lat, data_wild$group,data_wild$latitude_range, data_wild$PC1, data_wild$PC2, data_wild$PC3, data_wild$PC4, data_wild$PC5,  Env)
names(Variables)[1]<- paste("geno")
names(Variables)[2]<- paste("long")
names(Variables)[3]<- paste("lat")
names(Variables)[4]<- paste("group")
names(Variables)[5]<- paste("latitude_range")
names(Variables)[6]<- paste("PC1")
names(Variables)[7]<- paste("PC2")
names(Variables)[8]<- paste("PC3")
names(Variables)[9]<- paste("PC4")
names(Variables)[10]<- paste("PC5")

RDAgeo_env <- rda(genoWild_MAF005 ~ bio2+bio10+bio11+	bio15	+ bio18 + bio19, Variables)

sqrt(vif.cca(RDAgeo_env))

######## Here I can plot the wild genotypes in RDA space and see potential differences among latitude ranges


######### run RDA for GEA identification
## Use latent factor for covariable correction
# latent factor temperature variable
Y <- genoWild_MAF005
sel_temp<- data.frame(Env%>% select(bio2, bio10, bio11))
write.env(sel_temp, "Temp_variable.env")
X = read.table("Temp_variable.env")

mod.lfmm2 <- lfmm2(input = Y, env = X, K = 4)
str(mod.lfmm2)
mod.lfmm2@U
#Merge latent factor to Variable
latent_temp<-data.frame(rownames(genoWild_MAF005), mod.lfmm2@U)
Temp_Var<-cbind(Variables,latent_temp)


#GEA Temperature
RDA_temp <- rda(genoWild_MAF005 ~ bio2+bio10+bio11 +  Condition(X1 + X2 +X3 +X4 + lat + long), Temp_Var)
summary(eigenvals(RDA_temp, model = "constrained"))
library(robust)
rdadapt<-function(rda,K)
{
  zscores<-rda$CCA$v[,1:as.numeric(K)]
  resscale <- apply(zscores, 2, scale)
  resmaha <- covRob(resscale, distance = TRUE, na.action= na.omit, estim="pairwiseGK")$dist
  lambda <- median(resmaha)/qchisq(0.5,df=K)
  reschi2test <- pchisq(resmaha/lambda,K,lower.tail=FALSE)
  qval <- qvalue(reschi2test)
  q.values_rdadapt<-qval$qvalues
  return(data.frame(p.values=reschi2test, q.values=q.values_rdadapt))
}

rdadapt_temp<- rdadapt(RDA_temp, 2)
## P-values threshold after Bonferroni correction
thres_env <- 0.05/length(rdadapt_temp$p.values)
## Identifying the loci that are below the p-value threshold
top_outliers <- data.frame(Loci = colnames(genoWild_MAF005)[which(rdadapt_temp$p.values<thres_env)], p.value = rdadapt_temp$p.values[which(rdadapt_temp$p.values<thres_env)], contig = unlist(lapply(strsplit(colnames(genoWild_MAF005)[which(rdadapt_temp$p.values<thres_env)], split = "_"), function(x) x[1])))
qvalue <- data.frame(Loci = colnames(genoWild_MAF005), p.value = rdadapt_temp$p.values, q.value = rdadapt_temp$q.value)
outliers <- data.frame(Loci = colnames(genoWild_MAF005)[which(rdadapt_temp$q.values<0.05)], p.value = rdadapt_temp$p.values[which(rdadapt_temp$q.values<0.05)])

#latent factor precipitation variable

Y <- genoWild_MAF005
sel_prec<- data.frame(Env%>% select(bio15, bio18, bio19))
write.env(sel_prec, "prec_variable.env")
X = read.table("prec_variable.env")
mod.lfmm2 <- lfmm2(input = Y, env = X, K = 4)
str(mod.lfmm2)
mod.lfmm2@U
#Merge latent factor to Variable
latent_prec<-data.frame(rownames(genoWild_MAF005), mod.lfmm2@U)
Prec_Var<-cbind(Variables,latent_prec)



## GEA Precipitation
RDA_prec <- rda(genoWild_MAF005 ~ 	bio15	+ bio18 + bio19 +  Condition(X1 + X2 + X3 + X4 + lat + long), Prec_Var)
summary(eigenvals(RDA_prec, model = "constrained"))

rdadapt_prec<- rdadapt(RDA_prec, 2)
## P-values threshold after Bonferroni correction
thres_env <- 0.05/length(rdadapt_prec$p.values)
## Identifying the loci that are below the p-value threshold
top_outliers <- data.frame(Loci = colnames(genoWild_MAF005)[which(rdadapt_prec$p.values<thres_env)], p.value = rdadapt_prec$p.values[which(rdadapt_prec$p.values<thres_env)], contig = unlist(lapply(strsplit(colnames(genoWild_MAF005)[which(rdadapt_prec$p.values<thres_env)], split = "_"), function(x) x[1])))

qvalue <- data.frame(Loci = colnames(genoWild_MAF005), p.value = rdadapt_prec$p.values, q.value = rdadapt_prec$q.value)
outliers <- data.frame(Loci = colnames(genoWild_MAF005)[which(rdadapt_prec$q.values<0.05)], p.value = rdadapt_prec$p.values[which(rdadapt_prec$q.values<0.05)])


######RDA only with GEA QTL
geno_Wild_GEA<-genoWild_MAF005[which((rdadapt_temp$q.values<0.05)|(rdadapt_prec$q.values<0.05))]
write.table(geno_Wild_GEA, "geno_Wild_GEA.txt") #save the new GEA genotype data

RDA_all_enriched<-rda(geno_Wild_GEA ~ bio2 + bio10 + bio11 + bio15	+ bio18 + bio19, Variables)
summary(eigenvals(RDA_all_enriched, model = "constrained"))


# plot Geographic regions



TAB_gen <- data.frame(geno = row.names(scores(RDA_all_enriched , display = "sites")), scores(RDA_all_enriched, display = "sites"))

Geno <- merge(TAB_gen, Variables[, 1:7] ,by="geno")
TAB_var <- as.data.frame(scores(RDA_all_enriched, choices=c(1,2), display="bp"))
loading_geno_all_enriched_region<-ggplot() +
  geom_hline(yintercept=0, linetype="dashed", color = gray(.80), size=0.6) +
  geom_vline(xintercept=0, linetype="dashed", color = gray(.80), size=0.6) +
  geom_point(data = Geno, aes(x=RDA1, y=RDA2, colour = latitude_range), size = 2.5) +
  scale_color_manual(values = c("darkgreen","darkred", "darkorange")) +
  geom_segment(data = TAB_var, aes(xend=RDA1*5, yend=RDA2*5, x=0, y=0), colour="black", size=0.15, linetype=1, arrow=arrow(length = unit(0.02, "npc"))) +
  geom_label_repel(data = TAB_var, aes(x=5*RDA1, y=5*RDA2, label = row.names(TAB_var)), size = 2.5, family = "Times") +
  xlab("RDA 1: 28%") + ylab("RDA 2: 24%") +
  guides(color=guide_legend(title="Locus type")) +
  theme_bw(base_size = 11, base_family = "Times") +
  theme(panel.background = element_blank(), legend.background = element_blank(), panel.grid = element_blank(), plot.background = element_blank(), legend.text=element_text(size=rel(.8)), strip.text = element_text(size=11))
loading_geno_all_enriched_region
jpeg(file = "/lustre/rocchettil/RDA_all_geno_biplot_region.jpeg")
plot(loading_geno_all_enriched_region)
dev.off()


#adaptive index function

adaptive_index <- function(RDA, K, env_pres, range = NULL, method = "loadings", scale_env, center_env){
  
  # Formatting environmental rasters for projection
  var_env_proj_pres <- as.data.frame(rasterToPoints(env_pres[[row.names(RDA$CCA$biplot)]]))
  
  # Standardization of the environmental variables
  var_env_proj_RDA <- as.data.frame(scale(var_env_proj_pres[,-c(1,2)], center_env[row.names(RDA$CCA$biplot)], scale_env[row.names(RDA$CCA$biplot)]))
  
  # Predicting pixels genetic component based on RDA axes
  Proj_pres <- list()
  if(method == "loadings"){
    for(i in 1:K){
      ras_pres <- rasterFromXYZ(data.frame(var_env_proj_pres[,c(1,2)], Z = as.vector(apply(var_env_proj_RDA[,names(RDA$CCA$biplot[,i])], 1, function(x) sum( x * RDA$CCA$biplot[,i])))), crs = crs(env_pres))
      names(ras_pres) <- paste0("RDA_pres_", as.character(i))
      Proj_pres[[i]] <- ras_pres
      names(Proj_pres)[i] <- paste0("RDA", as.character(i))
    }
  }
  
  # Prediction with RDA model and linear combinations
  if(method == "predict"){ 
    pred <- predict(RDA, var_env_proj_RDA[,names(RDA$CCA$biplot[,i])], type = "lc")
    for(i in 1:K){
      ras_pres <- rasterFromXYZ(data.frame(var_env_proj_pres[,c(1,2)], Z = as.vector(pred[,i])), crs = crs(env_pres))
      names(ras_pres) <- paste0("RDA_pres_", as.character(i))
      Proj_pres[[i]] <- ras_pres
      names(Proj_pres)[i] <- paste0("RDA", as.character(i))
    }
  }
  
  # Returning projections for current climates for each RDA axis
  return(Proj_pres = Proj_pres)
}
Recovering scaling coefficients Create a table of scaled temperature variable


library('dplyr')

vars = Variables %>% select('bio2','bio10', 'bio11', 'bio15', 'bio18', 'bio19')
Var_scale <- scale(vars, center=TRUE, scale=TRUE)
scale_var <- attr(Var_scale, 'scaled:scale')
center_var <- attr(Var_scale, 'scaled:center')

Enter the raster file for the specific bioclimatic variable for current climatic situation

# ras temperature
library(raster)
library("readxl")


bio2<- raster(paste("/storage/replicated/cirad/projects/CLIMOLIVEMED/results/GenomicOffsets/Lorenzo/Current_ENM_clipped_biova/bio2_current_masked.tif"))
bio10<- raster(paste("/storage/replicated/cirad/projects/CLIMOLIVEMED/results/GenomicOffsets/Lorenzo/Current_ENM_clipped_biova/bio10_current_masked.tif"))
bio11<- raster(paste("/storage/replicated/cirad/projects/CLIMOLIVEMED/results/GenomicOffsets/Lorenzo/Current_ENM_clipped_biova/bio11_current_masked.tif"))
bio15<- raster(paste("/storage/replicated/cirad/projects/CLIMOLIVEMED/results/GenomicOffsets/Lorenzo/Current_ENM_clipped_biova/bio15_current_masked.tif"))
bio18<- raster(paste("/storage/replicated/cirad/projects/CLIMOLIVEMED/results/GenomicOffsets/Lorenzo/Current_ENM_clipped_biova/bio18_current_masked.tif"))
bio19<- raster(paste("/storage/replicated/cirad/projects/CLIMOLIVEMED/results/GenomicOffsets/Lorenzo/Current_ENM_clipped_biova/bio19_current_masked.tif"))
names(bio2) = 'bio2'
names(bio10) = 'bio10'
names(bio11) = 'bio11'
names(bio15) = 'bio15'
names(bio18) = 'bio18'
names(bio19) = 'bio19'
#stack the different raster file
ras_current_var<-stack(c(bio2,bio10, bio11, bio15, bio18, bio19))
Predict tha adaptive index for each pixel grid

## Function to predict the adaptive index across the landscape
source("./src/adaptive_index.R")

res_RDA_all_proj_current <- adaptive_index(RDA = RDA_all_enriched, K = 2, env_pres = ras_current_var, range = range, method = "loadings", scale_env = scale_var, center_env = center_var)
projection<- stack(c(res_RDA_all_proj_current$RDA1, res_RDA_all_proj_current$RDA2))
plot(projection)
writeRaster(projection,'Wild_adaptive_landscape.tif',options=c('TFW=YES'))#save raster for QGIS


























### Estimation of cultivar Offset

#filter cultivar individuals
cul_list<-read.table("P2_individual_list.txt", header = F)
genoCul <-  geno359[rownames(geno359)%in% cul_list$V1, ]
geno_Cul_GEA <- genoCul[, colnames(genoCul) %in% colnames(geno_Wild_GEA)]

# Predict RDA scores for the domesticated genotypes

  fitted_dom_RDAscores <- predict(RDA_all_enriched, newdata=geno62_dom_GEA, type="wa")




#### Add group and hybrid class (interclass heterozigosity) to the genotype datafile

pca_data$group <- "group"
pca_data$group[rownames(pca_data)%in%TAB_gen202$geno] <- "wild_admixed"
pca_data$group[rownames(pca_data)%in%TAB_gen62$geno] <- "cultivated"

genoWild <- geno62_dom[, colnames(geno62_dom) %in% colnames(geno_all_enrich)]
